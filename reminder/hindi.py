import os
import time
import logging
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
from apscheduler.schedulers.background import BackgroundScheduler
from gtts import gTTS
import pygame
import tempfile

# ---------------- Logging ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# ---------------- Config ----------------
SERVICE_ACCOUNT_FILE = "credentials.json"
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]

SPREADSHEET_ID = "1nlf25Wk0wY5kzZz-5j2fVNJt9SpKl-Fiz3JEl2AUo2U"
SHEET_NAME = "Sheet1"

LOOKAHEAD_DAYS = 3
REMINDER_TIME = "12:30"
COMPANY_NAME = "рдХреНрд░реЗрдбрдорд┐рдВрдЯ рдЯреЗрдХреНрдиреЛрд▓реЙрдЬреАрдЬ рдкреНрд░рд╛рдЗрд╡реЗрдЯ рд▓рд┐рдорд┐рдЯреЗрдб"

# ---------------- Speech Engine ----------------
def speak(text: str,speed: float = 1.5):
    """
    Speak the given text aloud in natural Indian Hindi-English (Hinglish).
    """
    logging.info(" Speaking reminder...")
    try:
       # tts = gTTS(text=text, lang="hi", tld="co.in")
        tts = gTTS(text=text, lang="hi", tld="co.in", slow=False)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as fp:
            temp_file = fp.name
            tts.save(temp_file)
        pygame.mixer.init(frequency=int(22050 * speed))

        pygame.mixer.music.load(temp_file)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            time.sleep(0.05)
        pygame.mixer.quit()
        os.remove(temp_file)
    except Exception as e:
        logging.error(f" Speech error: {e}")


# ---------------- Google Sheets ----------------
def fetch_sheet_rows():
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
    rows = sheet.get_all_records()
    logging.info(f"Fetched {len(rows)} rows from sheet")
    return rows

# ---------------- Build Reminder Script ----------------
# def build_script(customer, invoice_id, amount, due_date, status):
#     """
#     Return a polite, friendly Hindi+English reminder for the customer.
#     Female conversational tone.
#     """
#     if status == "today":
#         return (
#             f"рдирдорд╕реНрддреЗ {customer} рдЬреАред рдореИрдВ {COMPANY_NAME} рдХреА рдУрд░ рд╕реЗ рдмреЛрд▓ рд░рд╣реА рд╣реВрдБред "
#             f"рдЖрдкрдХреА invoice {invoice_id} рдХреА payment, {amount} рд░реБрдкрдпреЗ, рдЖрдЬ, {due_date} рдХреЛ due рд╣реИред "
#             "рдХреГрдкрдпрд╛ рдпреВрдкреАрдЖрдИ, рдХрд╛рд░реНрдб рдпрд╛ рдСрдирд▓рд╛рдЗрди рд▓рд┐рдВрдХ рд╕реЗ payment рдХрд░ рджреЗрдВред "
#             "рдЕрдЧрд░ рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╣реА payment рдХрд░ рджрд┐рдпрд╛ рд╣реИ, рддреЛ рдХреЛрдИ рдмрд╛рдд рдирд╣реАрдВ, рдЗрд╕ рд╕рдВрджреЗрд╢ рдХреЛ ignore рдХрд░ рджреАрдЬрд┐рдПред "
#             "рдзрдиреНрдпрд╡рд╛рджред рдЖрдкрдХрд╛ рд╕рд╣рдпреЛрдЧ рд╣рдорд╛рд░реЗ рд▓рд┐рдП рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред"
#         )

#     elif status == "upcoming":
#         return (
#             f"рдирдорд╕реНрддреЗ {customer} рдЬреАред рдпрд╣ {COMPANY_NAME} рдХреА payment reminder call рд╣реИред "
#             f"рдЖрдкрдХреА invoice {invoice_id} рдХреА payment, {amount} , {due_date} рдХреЛ due рд╣реИред "
#             "рдмрд╕ рдЖрдкрдХреЛ gentle reminder рджреЗрдирд╛ рдерд╛ рддрд╛рдХрд┐ рдЖрдк рдЖрд░рд╛рдо рд╕реЗ payment plan рдХрд░ рд╕рдХреЗрдВред "
#             "рдЕрдЧрд░ payment already рдХрд░ рджрд┐рдпрд╛ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рдЗрд╕ message рдХреЛ ignore рдХрд░ рджреЗрдВред "
#             "рд╣рдо рдЖрдкрдХреЗ business рдХреА рдмрд╣реБрдд рдХрджреНрд░ рдХрд░рддреЗ рд╣реИрдВред" 
#         )

#     elif status == "overdue":
#         return (
#             f"рдирдорд╕реНрддреЗ {customer} рдЬреАред рдореИрдВ {COMPANY_NAME} рд╕реЗ рдмреЛрд▓ рд░рд╣реА рд╣реВрдБред "
#             f"рд╣рдорд╛рд░реЗ records рдХреЗ рдЕрдиреБрд╕рд╛рд░ invoice {invoice_id} рдХреА {amount} рд░реБрдкрдпреЗ рдХреА payment, {due_date} рдХреЛ due рдереА, "
#             "рдФрд░ рдЕрднреА рддрдХ receive рдирд╣реАрдВ рд╣реБрдИ рд╣реИред "
#             "рдЕрдЧрд░ рдЖрдкрдиреЗ already payment рдХрд░ рджрд┐рдпрд╛ рд╣реИ рддреЛ рдареАрдХ рд╣реИ, ignore рдХрд░ рджреАрдЬрд┐рдПред "
#             "рдЕрдЧрд░ payment рдореЗрдВ рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рд╣рдореЗрдВ inform рдХрд░реЗрдВ рдпрд╛ support team рд╕реЗ рдмрд╛рдд рдХрд░ рд▓реЗрдВред "
#             "рдЖрдкрдХреЗ рд╕рд╣рдпреЛрдЧ рдХреЗ рд▓рд┐рдП рд╣рдо рдмрд╣реБрдд рдЖрднрд╛рд░реА рд╣реИрдВред"
#         )

#     return ""

def build_script(customer, invoice_id, amount, due_date, status):
    """
    Friendly, natural Hindi+English payment reminder in female voice style.
    Short, clear, and optimized for fast gTTS playback.
    """
    if status == "today":
        return (
          f"рдирдорд╕реНрддреЗ {customer} рдЬреА, рдореИрдВ {COMPANY_NAME} рд╕реЗ рдмреЛрд▓ рд░рд╣реА рд╣реВрдБред "
          f"рдЖрдкрдХрд╛ {amount} рд░реБрдкрдП рдХрд╛ payment рдЖрдЬ {due_date} рдХреЛ рдмрдХрд╛рдпрд╛ рд╣реИред "
           "рдХреГрдкрдпрд╛ рд╕рдордп рдкрд░ рднреБрдЧрддрд╛рди рдХрд░реЗрдВ, рдпрд╛ рд╣рдорд╛рд░реЗ рдРрдк рд╕реЗ рддреБрд░рдВрдд payment рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, "
           "рдЬреЛ рдкреНрд▓реЗрд╕реНрдЯреЛрд░ рдФрд░ рдРрдк рд╕реНрдЯреЛрд░ рдкрд░ рдЙрдкрд▓рдмреНрдз рд╣реИред "
           "рдЕрдЧрд░ рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╣реА payment рдХрд░ рджрд┐рдпрд╛ рд╣реИ, рддреЛ рдЗрд╕ message рдХреЛ ignore рдХрд░ рджреАрдЬрд┐рдПред "
           "рдзрдиреНрдпрд╡рд╛рдж, рдЖрдкрдХрд╛ рд╕рд╣рдпреЛрдЧ рд╣рдорд╛рд░реЗ рд▓рд┐рдП рдмрд╣реБрдд рдорд╛рдпрдиреЗ рд░рдЦрддрд╛ рд╣реИред"
        )

    elif status == "upcoming":
        return (
            f"рдирдорд╕реНрддреЗ {customer} рдЬреАред рдореИрдВ {COMPANY_NAME} рд╕реЗ рдмреЛрд▓ рд░рд╣реА рд╣реВрдБред "
            f"рдЖрдкрдХрд╛ {amount} рд░реБрдкрдП рдХрд╛ payment {due_date} рдХреЛ due рд╣реИред "
            "рдпрд╣ рд╕рд┐рд░реНрдл рдПрдХ friendly payment reminder рд╣реИ рддрд╛рдХрд┐ рдЖрдк рд╕рдордп рдкрд░ payment рдХрд░ рд╕рдХреЗрдВред "
            "рдЖрдк рд╣рдорд╛рд░реЗ рдРрдк рд╕реЗ рднреА рдЬрд▓реНрджреА payment рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред "
            "рдЬрд┐рд╕реЗ рдкреНрд▓реЗрд╕реНрдЯреЛрд░ рдпрд╛ рдРрдк рд╕реНрдЯреЛрд░ рд╕реЗ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред "
            "рдЕрдЧрд░ рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╣реА payment рдХрд░ рджрд┐рдпрд╛ рд╣реИ, рддреЛ рдХреЛрдИ рдмрд╛рдд рдирд╣реАрдВред "
            "рдзрдиреНрдпрд╡рд╛рдж, рдЖрдкрдХрд╛ рд╕рд╣рдпреЛрдЧ рд╣рдорд╛рд░реЗ рд▓рд┐рдП рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред"
        )

    elif status == "overdue":
        return (
            f"рдирдорд╕реНрддреЗ {customer} рдЬреАред рдореИрдВ {COMPANY_NAME} рд╕реЗ рдмреЛрд▓ рд░рд╣реА рд╣реВрдБред "
            f"рд╣рдорд╛рд░реЗ records рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЖрдкрдХрд╛ {amount} рд░реБрдкрдП рдХрд╛ payment {due_date} рдХреЛ due рдерд╛ рдФрд░ рдЕрднреА рддрдХ receive рдирд╣реАрдВ рд╣реБрдЖ рд╣реИред "
            "рдХреГрдкрдпрд╛ рдЬрд▓реНрдж рд╕реЗ рдЬрд▓реНрдж рднреБрдЧрддрд╛рди рдХрд░реЗрдВ, рдпрд╛ рд╣рдорд╛рд░реЗ рдРрдк рд╕реЗ рддреБрд░рдВрдд payment рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред "
            "рдЬрд┐рд╕реЗ рдкреНрд▓реЗрд╕реНрдЯреЛрд░ рдпрд╛ рдРрдк рд╕реНрдЯреЛрд░ рд╕реЗ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред "
            "рдЕрдЧрд░ рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╣реА payment рдХрд░ рджрд┐рдпрд╛ рд╣реИ, рддреЛ рдХреЛрдИ рдмрд╛рдд рдирд╣реАрдВред "
            "рдзрдиреНрдпрд╡рд╛рдж, рдЖрдкрдХрд╛ рд╕рд╣рдпреЛрдЧ рд╣рдорд╛рд░реЗ рд▓рд┐рдП рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред"
        )

    return ""

# ---------------- Calling Logic ----------------
def call_customer(name, message):
    logging.info(f"ЁЯУЮ Starting call to {name}")
    speak(message)
    logging.info(f"тЬЕ Call finished for {name}")
    time.sleep(3)  # pause before next call

def process_reminders(reminders):
    spoken_count = 0
    for reminder in reminders:
        call_customer(reminder["customer"], reminder["message"])
        spoken_count += 1
    logging.info(f"ЁЯУК Reminders spoken this run: {spoken_count}")

# ---------------- Check Reminders ----------------
def check_and_speak_reminders():
    rows = fetch_sheet_rows()
    today = datetime.today().date()
    lookahead = today + timedelta(days=LOOKAHEAD_DAYS)

    reminders = []
    for row in rows:
        try:
            due_date = datetime.strptime(str(row["Due Date"]), "%d-%m-%Y").date()
        except ValueError:
            logging.warning(f"Skipping row with invalid due date: {row}")
            continue

        if due_date == today:
            status = "today"
        elif today < due_date <= lookahead:
            status = "upcoming"
        elif due_date < today:
            status = "overdue" 
        else:
            continue

        script = build_script(
            customer=row["Name"],
            invoice_id=row["InvoiceID"],
            amount=row["Amount"],
            due_date=due_date.strftime("%d %B %Y"), 
            status=status,
        )
        if script:
            reminders.append({"customer": row["Name"], "message": script})

    if reminders:
        process_reminders(reminders)
    else:
        logging.info("No reminders to speak today.")

# ---------------- Main ----------------
def main():
    logging.info("Running initial reminder check...")
    check_and_speak_reminders()

    scheduler = BackgroundScheduler()
    hour, minute = map(int, REMINDER_TIME.split(":"))
    scheduler.add_job(check_and_speak_reminders, "cron", hour=hour, minute=minute)
    scheduler.start()
    logging.info(f"Scheduler started тАФ daily reminders at {REMINDER_TIME}. Press Ctrl+C to exit.")

    try:
        while True:
            time.sleep(60)
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        logging.info("Scheduler stopped.")

if __name__ == "__main__":
    main()

